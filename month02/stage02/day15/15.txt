前情回顾

1. 群聊聊天室

   代码思路
   通信协议
   总分模式
   模块逻辑流程梳理--》 编写

2. 线程

   轻量级  多任务  共享进程资源  运行过程

3. 创建线程
   写函数-》 t = Thread() -> t.start()

4. 同步互斥

   Event()  e.wait()  e.set() e.clear()


练习02：
创建2个分支线程，一个打印 1--52 这52个数字
一个打印 A--Z这26个字母，两个分支线程启动后
要求打印出来的顺序是 12A34B...5152Z

提示： 可以创建多个同步互斥对象



基于多进程并发原理完成一个同样功能的多线程tcp并发模型
，完成后与 tcp_client.py测试
要求使用类完成

ftp 文件服务器
    分为服务端和客户端，要求可以有多个客户端同时操作。
    客户端可以查看服务器文件库中有什么文件。
    客户端可以从文件库中下载文件到本地。
    客户端可以上传一个本地文件到文件库。
    使用print在客户端打印命令输入提示，引导操作

需求分析 ： C/S
  见图

技术点 ：
   并发模型： 多线程并发
   网络： tcp
   文件网络传输 ：  读发 --》 收写

结构和模块划分 （类）

   查看文件
   下载
   上传

通信协议
             请求类型      数据参数
   查看文件    LIST
   下载       GET         filename
   上传       PUT         filename
   退出       QUIT

分模块逻辑分析编写
   搭建框架
     服务端： 多线程tcp网络并发
     客户端： 参考学生管理系统view + 网络

   查看文件
   下载
   上传

优化完善


今日内容：
  1. 同步互斥  Lock   死锁
  2. GIL
  3. 进程线程对比
  4. 多进程多线程并发 （重点）

作业： 1. 重点代码独立完成
      2. ftp框架模型
         尝试下载







