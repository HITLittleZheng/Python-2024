前情回顾

1. 线程同步互斥
   lock = Lock()

   死锁

2. GIL问题

   Python线程无法并行
   效率低，只适用于有高延迟阻塞的情况

   建议： 无阻塞用进程    JPython

3. 进程线程

4. 多进程多线程的并发网络模型

   同时应对多个客户端请求

   每当一个客户端连接就创建一个新的进程或者线程


ftp 文件服务器
    分为服务端和客户端，要求可以有多个客户端同时操作。
    客户端可以查看服务器文件库中有什么文件。
    客户端可以从文件库中下载文件到本地。
    客户端可以上传一个本地文件到文件库。
    使用print在客户端打印命令输入提示，引导操作

需求分析 ： C/S
  见图

技术点 ：
   并发模型： 多线程并发
   网络： tcp
   文件网络传输 ：  读发 --》 收写

结构和模块划分 （类）

   查看文件
   下载
   上传

通信协议
   request
             请求类型      数据参数
   查看文件    LIST
   下载       GET         filename
   上传       PUT         filename
   退出       QUIT

   response
   下载 ： 下载成功  文件不存在  权限不够 ....
   上传 ： 上传成功  文件已存在  空间不足  文件过大...
   查看文件 ： 成功  文件列表为空   权限不够...


分模块逻辑分析编写
   搭建框架
     服务端： 多线程tcp网络并发
     客户端： 参考学生管理系统view + 网络

   下载
      客户端： 输入文件名
              发送请求  GET filename
              接收响应，根据响应情况处理
                 接收文件
                 结束

      服务端： 接收请求
              判断响应情况
              发送响应
                 发送文件
                 结束

   查看文件

   上传


优化完善




今日内容：
1. ftp文件服务器
2. IO
3. 阻塞  非阻塞
4. IO多路复用
5. IO并发模型

作业： 1. ftp文件服务器代码整理
      2. select 代码自己独立写




